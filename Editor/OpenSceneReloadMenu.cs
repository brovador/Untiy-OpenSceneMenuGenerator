using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;

public class OpenSceneReloadMenu {

	[MenuItem("Open scene/Reload this menu", false, 15)]
	static void ReloadThisMenu()
	{
		GenerateOpenSceneMenuScript();
	}

	static void GenerateOpenSceneMenuScript()
	{
		string myPath = null;
		var guids = AssetDatabase.FindAssets("OpenSceneReloadMenu");
		foreach (string guid in guids) {
			myPath = AssetDatabase.GUIDToAssetPath(guid);
			break;
		}

		if (myPath == null) {
			Debug.LogError("[OpenSceneReloadMenu] Path for this class not found");
		} else {
			var basePath = Path.GetDirectoryName(myPath);
			var menuScriptPath = Path.Combine(basePath, "OpenSceneMenu.cs");

			var sb = new StringBuilder();
			sb.AppendLine("//Autogenerated class by script: " + myPath);
			sb.AppendLine("using UnityEngine;");
			sb.AppendLine("using UnityEditor;");
			sb.AppendLine("");
			sb.AppendLine("public static class OpenSceneMenu {");

			var scenePaths = UnityEditor.EditorBuildSettings.scenes;
			foreach (var scene in scenePaths) {

				if (!scene.enabled) continue;

				var scenePath = scene.path;
				var sceneNameRaw = Path.GetFileNameWithoutExtension(scenePath);
				var sceneName = CleanString(sceneNameRaw);

				sb.AppendLine("");
				sb.AppendLine(string.Format("\t[MenuItem(\"Open scene/{0}\", false, 0)]", sceneNameRaw));
				sb.AppendLine(string.Format("\tstatic void Open{0}() {{", sceneName));
				sb.AppendLine(string.Format("\t\tOpenScene(\"{0}\");", scenePath));
				sb.AppendLine("\t}");
			}

			sb.AppendLine("");
			sb.AppendLine("\tstatic void OpenScene(string scenePath) {");
			sb.AppendLine("\tif (UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo()) {");
			sb.AppendLine("\t\t\tUnityEditor.SceneManagement.EditorSceneManager.OpenScene(scenePath);");
			sb.AppendLine("\t\t}");
			sb.AppendLine("\t}");


			sb.AppendLine("}");

			File.Delete(menuScriptPath);
			File.WriteAllText(menuScriptPath, sb.ToString(), System.Text.Encoding.UTF8);
			AssetDatabase.ImportAsset(menuScriptPath);

			Debug.Log("[OpenSceneReloadMenu] Menu updated");
		}
	}

	static string CleanString(string inputStr) 
	{
		return Regex.Replace(inputStr, @"[^\w\.@-]", "");
	}
}
